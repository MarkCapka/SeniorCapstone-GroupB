Index: SkyBoxJavaFX-Tester/src/main/java/com/example/skyboxjavafxtester/SkyBoxApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.skyboxjavafxtester;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.collections.ObservableIntegerArray;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Point3D;\r\nimport javafx.geometry.Rectangle2D;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.effect.Light;\r\nimport javafx.scene.effect.Lighting;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.transform.Affine;\r\nimport javafx.scene.transform.Transform;\r\nimport javafx.stage.Stage;\r\nimport com.interactivemesh.jfx.importer.tds.TdsModelImporter;\r\nimport com.luckycatlabs.sunrisesunset.*;\r\nimport com.luckycatlabs.sunrisesunset.dto.Location;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.*;\r\nimport javafx.scene.transform.Rotate;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableFloatArray;\r\n\r\n\r\n\r\npublic class SkyBoxApplication extends Application {\r\n\r\n\r\n    static Group skybox = new Group();\r\n\r\n    private static Image skyboxImage;\r\n    private static TriangleMesh cubeMesh;\r\n    //camera controls and scene settings declarations\r\n    private PerspectiveCamera camera;\r\n    private Group cameraDolly;\r\n    private final double cameraQuantity = 10.0;\r\n    private static final int WIDTH = 680;\r\n    private static final int HEIGHT = 849;\r\n    private static final int DEPTH = 700;\r\n\r\n    //Mouse control variable declarations\r\n    private double mousePosX;\r\n    private double mousePosY;\r\n    private double mouseOldX;\r\n    private double mouseOldY;\r\n    private double mouseDeltaX;\r\n    private double mouseDeltaY;\r\n    private final Affine affine = new Affine();\r\n    //setting up for the folding of our image into a skybox\r\n    private final ImageView\r\n            top   = new ImageView(),\r\n            bottom= new ImageView(),\r\n            left  = new ImageView(),\r\n            right = new ImageView(),\r\n            back  = new ImageView(),\r\n            front = new ImageView();\r\n    private double size;\r\n\r\n\r\n    {\r\n        top.setId(\"top \");\r\n        bottom.setId(\"bottom \");\r\n        left.setId(\"left \");\r\n        right.setId(\"right \");\r\n        back.setId(\"back \");\r\n        front.setId(\"front \");\r\n    }\r\n\r\n    //aggregating these views into a list\r\n    private final ImageView[] views = new ImageView[]\r\n            {\r\n                    top, left, back, right, front, bottom\r\n            };\r\n\r\n\r\n\r\n\r\n    //Model Import Declaration\r\n    private static final File house = new File(\"C:\\\\House.3ds\");\r\n    private static final File solarPanel = new File(\"C:\\\\SolarPanel(Export).3ds\");\r\n    private static final File groundSolarPanel = new File(\"C:\\\\GroundSolarPanel.3ds\");\r\n    private static Group solarPanelImport;\r\n    private static Group gPanelOne;\r\n    private static Group gPanelTwo;\r\n    private static Group houseImport;\r\n    static Group solarPanelOnewR;\r\n    static Group solarPanelTwowR;\r\n    static Group solarPanelThreewR;\r\n    static Group solarPanelFourwR;\r\n    static Group gPanelOneBox;\r\n    static Group gPanelTwoBox;\r\n    static Group panelsWHouse;\r\n    static Group sun;\r\n    private Boolean oneSelected = false;\r\n    private Boolean twoSelected = false;\r\n    static PhongMaterial clear = new PhongMaterial(Color.TRANSPARENT);\r\n\r\n    //Location and Dates\r\n    static String sunriseTime;\r\n    static String sunsetTime;\r\n    static Calendar cal;\r\n    static String theDate = \"20220310\";\r\n    static String theLocation;\r\n    static String timeZone = \"GMT-8\";\r\n    static Location location;\r\n    static Double latitude = 47.6588;\r\n    static Double longitude = -117.4260;\r\n    static Date date;\r\n\r\n    //Sun movement variables\r\n    static int timeAS;\r\n    static int timeBS;\r\n    static int sliceofday;\r\n    static int totalMinutes = 720;\r\n    static int sunrise = 0;\r\n    static int sunset = 720;\r\n    static boolean box1closest;\r\n    static boolean box2closest;\r\n    static boolean box3closest;\r\n    static boolean box4closest;\r\n    static boolean gbox1closest;\r\n    static boolean gbox2closest;\r\n    static PhongMaterial optimal = new PhongMaterial(Color.GREEN);\r\n    static PhongMaterial subOptimal = new PhongMaterial(Color.RED);\r\n\r\n    private AnchorPane sliderAndDate;\r\n    private AnchorPane uiPane;\r\n    private Label label;\r\n\r\n\r\n    //private final double WIDTH, HEIGHT, DEPTH;\r\n    private static TriangleMesh cube;\r\n    private MeshView skyBox;\r\n    private static float x0;\r\n    private static float x1;\r\n    private static float x2;\r\n    private static float x3;\r\n    private static float x4;\r\n    private static float y0;\r\n    private static float y1;\r\n    private static float y2;\r\n    private static float y3; //values for points of skybox\r\n\r\n    //private final Image textureImage;\r\n\r\n\r\n    //private static final double depth = skyboxImage.getDepth(); //MAY NOT NEED FOR cube since shoudl scale evenly\r\n    private static final ObservableIntegerArray faces = FXCollections.observableIntegerArray();\r\n    private static final ObservableFloatArray texCords = FXCollections.observableFloatArray();\r\n    private static final ObservableFloatArray points = FXCollections.observableFloatArray();\r\n\r\n\r\n\r\n    static Group root = new Group();\r\n    {\r\n        try {\r\n            skyboxImage = new Image(new FileInputStream(\"C:\\\\skyboxExample.png\"));\r\n            //TODO confirm if I need this, I THINK it helps with blending the photo together for the skybox corners .\r\n//           final double width = skyboxImage.getWidth();\r\n//            final double height = skyboxImage.getHeight();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(SkyBoxApplication.class.getResource(\"skybox-viewUI.fxml\"));\r\n        Pane entireFrame = new Pane();\r\n        Pane skyboxPane = new Pane();\r\n        try {\r\n            skyboxPane = SkyBoxController.setSkyboxPane();\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //TODO: make thie borderpane the root, but load the fxml\r\n//        double width = skyboxImage.getWidth();\r\n//        double height = skyboxImage.getHeight();\r\n\r\n        //  createSkybox(root);\r\n           //constructWorld(root); //lights\r\n\r\n//        createSun(root);\r\n//        sunriseSunset();\r\n        //    modifySkybox(root);\r\n\r\n//        Group panelsWHouse = addSolarPanel(root);\r\n\r\n        entireFrame.getChildren().add(fxmlLoader.load());\r\n       // skyboxPane.getChildren().addAll((Collection<? extends Node>) skyBox);\r\n        entireFrame.getChildren().addAll(skyboxPane);\r\n\r\n//        SubScene subScene = new SubScene(skyBox, 768, 600);\r\n\r\n//        PerspectiveCamera camera = new PerspectiveCamera();\r\n//        camera.setNearClip(0.1);\r\n//        camera.setFarClip(30000.0);\r\n\r\n//        subScene.setCamera(camera);\r\n//        subScene.setRoot(skyBox);\r\n\r\n        root.getChildren().addAll(entireFrame, skyboxPane);\r\n        Scene scene = new Scene(root, 1024, 768); // Make the whole scene with everything\r\n        cameraAndControls(root, panelsWHouse, scene);\r\n        scene.setRoot(root);\r\n\r\n        /*\r\n        // This needs to set up the inside of the skyboxPane?\r\n        scene.setFill(new ImagePattern(skyboxImage)); //THIS causes whole UI to get filled over, because we are adding it to the scene which encompassdes everything, could translate or\r\n      *(\r\n        camera = new PerspectiveCamera(true);\r\n        camera.setNearClip(0.1);\r\n        camera.setFarClip(30000.0);\r\n        //sceneRoot.getScene().setCamera(camera);\r\n        root.getScene().setCamera(camera);\r\n        // translations through dolly\r\n        */\r\n\r\n        stage.setTitle(\"Solar Optimization Simulator!\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private void cameraAndControls(Group root, Group panelsWHouse, Scene scene) {\r\n        camera = new PerspectiveCamera(true);\r\n        camera.setNearClip(0.1);\r\n        camera.setFarClip(30000.0);\r\n        scene.setCamera(camera);\r\n        // translations through dolly\r\n        cameraDolly = new Group();\r\n        cameraDolly.setTranslateZ(-1000);\r\n        cameraDolly.setTranslateX(200);\r\n        // rotation transforms\r\n        Group turn = new Group();\r\n        Rotate xRotate = new Rotate(0, 0, 0, 0, Rotate.X_AXIS);\r\n        Rotate yRotate = new Rotate(0, 0, 0, 0, Rotate.Y_AXIS);\r\n        camera.getTransforms().addAll(xRotate);\r\n        turn.getTransforms().addAll(yRotate);\r\n            //TODO we do have combo of\r\n        root.getChildren().add(cameraDolly);\r\n        cameraDolly.getChildren().add(turn);\r\n        turn.getChildren().add(camera);\r\n        //-------------END of Scene and Camera set up----------------------------//\r\n        //----------------Controls & Camera Controls Section----------------------------//\r\n        //TODO methodize out controls //NOTE i did try to split this from the scene and camera setup, but they were too intertwined at the time.\r\n        // Use keyboard to control camera position\r\n        scene.setOnKeyPressed(event -> {\r\n            double change = cameraQuantity;\r\n            // What key did the user press?\r\n            KeyCode keycode = event.getCode();\r\n\r\n            // Translate pivot = new Translate(); //TODO could use for a more elegant rotation of the camera\r\n\r\n            Rotate r = new Rotate(-1, Rotate.Y_AXIS); //rotate house right\r\n            Rotate l = new Rotate(1, Rotate.Y_AXIS); //rotate house left\r\n            Rotate n = new Rotate(45, Rotate.Y_AXIS); //rotate Ground Panel One\r\n            Rotate n1 = new Rotate(45, Rotate.Y_AXIS); //rotate Ground Panel Two\r\n\r\n            setCenters(r, houseImport); //Get centers to rotate from center\r\n            setCenters(l, houseImport);\r\n            setCenters(n, gPanelOne);\r\n            setCenters(n1, gPanelTwo);\r\n\r\n            Transform t = new Rotate();\r\n\r\n            Point3D delta = null;\r\n\r\n            if (keycode == KeyCode.COMMA) {\r\n                delta = new Point3D(0, 0, change);\r\n            }\r\n            if (keycode == KeyCode.PERIOD) {\r\n                delta = new Point3D(0, 0, -change);\r\n            }\r\n            if (keycode == KeyCode.A) {\r\n                delta = new Point3D(-change, 0, 0);\r\n            }\r\n            if (keycode == KeyCode.D) {\r\n                delta = new Point3D(change, 0, 0);\r\n            }\r\n            if (keycode == KeyCode.W) {\r\n                delta = new Point3D(0, -change, 0);\r\n            }\r\n            if (keycode == KeyCode.S) {\r\n                delta = new Point3D(0, change, 0);\r\n            }\r\n            //TODO make a path for the camera to follow in a sphere around the house based on current distance\r\n            if (keycode == KeyCode.Q) {                     //rotate camera clockwise\r\n                r = new Rotate(-1, Rotate.Y_AXIS);\r\n                t = t.createConcatenation(r);\r\n                camera.getTransforms().addAll(t);\r\n            }\r\n            //TODO make a path for the camera to follow in a sphere around the house based on current distance, opposite direction of Q\r\n            if (keycode == KeyCode.E) {                     //rotate camera counterclockwise\r\n                r = new Rotate(+1, Rotate.Y_AXIS);\r\n                t = t.createConcatenation(r);\r\n                camera.getTransforms().addAll(t);\r\n            }\r\n            if (keycode == KeyCode.M) {\r\n                r = new Rotate(1, Rotate.Y_AXIS); // Rotate House and Panels on/around Left\r\n                t = t.createConcatenation(r);\r\n                panelsWHouse.getTransforms().addAll(t);\r\n            }\r\n            if (keycode == KeyCode.N) { // Rotate House and Panels on/around Right\r\n                r = new Rotate(-1, Rotate.Y_AXIS);\r\n                t = t.createConcatenation(r);\r\n                panelsWHouse.getTransforms().addAll(t);\r\n            }\r\n            if(keycode == KeyCode.DIGIT0){ //Clears selected panels\r\n                clearSelected();\r\n            }\r\n            if(keycode == KeyCode.DIGIT1){ // Selects ground panel number 1\r\n                gPanelOneSelected();\r\n            }\r\n            if(keycode == KeyCode.DIGIT2) //selects ground panel number 2\r\n            {\r\n                gPanelTwoSelected();\r\n            }\r\n            if (keycode == KeyCode.RIGHT) { //Move selected ground panel to the right in the screen\r\n                if(oneSelected == true) {\r\n                    gPanelOneBox.setTranslateX(gPanelOneBox.getTranslateX() + 1);\r\n                }\r\n                else if(twoSelected == true){\r\n                    gPanelTwoBox.setTranslateX(gPanelTwoBox.getTranslateX() + 1);\r\n                }\r\n            }\r\n\r\n            if (keycode == KeyCode.LEFT) { //Move selected ground panel to the left in the screen\r\n                if(oneSelected == true) {\r\n                    gPanelOneBox.setTranslateX(gPanelOneBox.getTranslateX() - 1);\r\n                }\r\n                else if(twoSelected == true){\r\n                    gPanelTwoBox.setTranslateX(gPanelTwoBox.getTranslateX() - 1);\r\n                }\r\n            }\r\n\r\n            if (keycode == KeyCode.UP) { // Move selected ground panel back\r\n                if(oneSelected == true) {\r\n                    gPanelOneBox.setTranslateZ(gPanelOneBox.getTranslateZ() + 1);\r\n                }\r\n                else if(twoSelected == true) {\r\n                    gPanelTwoBox.setTranslateZ(gPanelTwoBox.getTranslateZ() + 1);\r\n                }\r\n            }\r\n\r\n            if (keycode == KeyCode.DOWN) { // Move selected ground panel forward\r\n                if(oneSelected == true) {\r\n                    gPanelOneBox.setTranslateZ(gPanelOneBox.getTranslateZ() - 1);\r\n                }\r\n                else if(twoSelected == true) {\r\n                    gPanelTwoBox.setTranslateZ(gPanelTwoBox.getTranslateZ() - 1);\r\n                }\r\n            }\r\n\r\n            if (keycode == KeyCode.SPACE) {  //Rotate selected ground solar panel\r\n                if(oneSelected == true) {\r\n                    t = t.createConcatenation(n);\r\n                    gPanelOneBox.getTransforms().addAll(t);\r\n                }\r\n                else if(twoSelected == true) {\r\n                    t = t.createConcatenation(n1);\r\n                    gPanelTwoBox.getTransforms().addAll(t);\r\n                }\r\n            }\r\n\r\n            if (delta != null) {\r\n                Point3D delta2 = camera.localToParent(delta);\r\n                cameraDolly.setTranslateX(cameraDolly.getTranslateX() + delta2.getX());\r\n                cameraDolly.setTranslateY(cameraDolly.getTranslateY() + delta2.getY());\r\n                cameraDolly.setTranslateZ(cameraDolly.getTranslateZ() + delta2.getZ());\r\n\r\n            }\r\n        });\r\n\r\n        // Use mouse to control camera rotation\r\n        scene.setOnMousePressed(me -> {\r\n            mousePosX = me.getSceneX();\r\n            mousePosY = me.getSceneY();\r\n        });\r\n\r\n\r\n        scene.setOnMouseDragged(me -> {\r\n            mouseOldX = mousePosX;\r\n            mouseOldY = mousePosY;\r\n            mousePosX = me.getSceneX();\r\n            mousePosY = me.getSceneY();\r\n            mouseDeltaX = (mousePosX - mouseOldX);\r\n            mouseDeltaY = (mousePosY - mouseOldY);\r\n\r\n            yRotate.setAngle(((yRotate.getAngle() - mouseDeltaX * 0.2) % 360 + 540) % 360 - 180); // +\r\n            xRotate.setAngle(((xRotate.getAngle() + mouseDeltaY * 0.2) % 360 + 540) % 360 - 180); // -\r\n        });\r\n    }\r\n\r\n    static void constructWorld(Group skyBox) {\r\n        // AmbientLight light = new AmbientLight();\r\n        AmbientLight light = new AmbientLight(Color.rgb(160, 160, 160));\r\n\r\n        PointLight pl = new PointLight();\r\n        pl.setTranslateX(1000);\r\n        pl.setTranslateY(-100);\r\n        pl.setTranslateZ(-100);\r\n        skyBox.getChildren().add(pl);\r\n\r\n        //TODO delete this once mesh is implemented -- Mark: 3/11\r\n        skyBox.getChildren().add(light);\r\n    }\r\n\r\n    // Example converted from JavaFX for Dummies from triangle mesh to cube mesh\r\n    public static Group createSkybox(Group skyboxGroup)\r\n    {\r\n       TriangleMesh cube = new TriangleMesh();\r\n        //TODO NOTE: this is messy since i've been trying a few different approahces.\r\n        Image textureImage = skyboxImage;\r\n       // loadImageViews(); //folded skybox\r\n\r\n//        TriangleMesh cube = createMesh(WIDTH, HEIGHT, DEPTH);\r\n//        calculatePoints();\r\n//        calculateTexCords();\r\n//        calculateFaces();\r\n\r\n//        MeshView cubeMesh= new MeshView(cube);\r\n//        cubeMesh.setOpacity(.75);\r\n\r\n        PhongMaterial skyboxMaterial = new PhongMaterial();\r\n\r\n        skyboxMaterial.setSpecularColor(Color.TRANSPARENT);\r\n        skyboxMaterial.setDiffuseMap(textureImage);\r\n\r\n        Box box = new Box(WIDTH, HEIGHT, DEPTH);\r\n\r\n        box.setMaterial(skyboxMaterial);\r\n\r\n        box.setTranslateX(500);\r\n        box.setTranslateY(400);\r\n        box.setTranslateZ(200);\r\n        box.setScaleX(1.5);\r\n        box.setScaleY(1.5);\r\n        box.setScaleZ(1.5);\r\n\r\n//        cubeMesh.setTranslateX(1000);\r\n//        cubeMesh.setTranslateY(400);\r\n//        cubeMesh.setTranslateZ(200);\r\n        box.setCullFace(CullFace.FRONT);\r\n//        cubeMesh.setCullFace(CullFace.NONE);\r\n//        cubeMesh.setMaterial(skyboxMaterial);\r\n        //TODO  maybe try something like:\r\n            //getpoints/add points, etc... then adding into start or initialize?\r\n\r\n        //skyboxGroup.getChildren().add(cubeMesh);\r\n       skyboxGroup.getChildren().add(box);\r\n\r\n       return skyboxGroup;\r\n    }\r\n\r\n//    private static TriangleMesh createMesh(int WIDTH, int HEIGHT, int DEPTH) {\r\n//\r\n//        calculatePoints();\r\n//        calculateFaces();\r\n//        calculateTexCords();\r\n//\r\n//        return cubeMesh;\r\n//    }\r\n\r\n\r\n    //skybox meshview implementation pulled and made specific from https://www.demo2s.com/java/javafx-trianglemesh-tutorial-with-examples.htm\r\n\r\n//    private static void calculatePoints() {\r\n//        float hw = (float) WIDTH/2;\r\n//        float hh = (float) HEIGHT/2;\r\n//        float hd = (float) DEPTH/2;\r\n//\r\n//\r\n//    //triangle mesh points: width, height, depth\r\n//        points.addAll(hw, hh, hd,\r\n//                hw, hh, -hd,\r\n//                hw, -hh, hd,\r\n//                hw, -hh, -hd,\r\n//                -hw, hh, hd,\r\n//                -hw, hh, -hd,\r\n//                -hw, -hh, hd,\r\n//                -hw, -hh, -hd);\r\n//        cube.getPoints().addAll(points);\r\n//\r\n//    }\r\n//    //Below is for setting faces for the values of the cubeMesh: uses 6 each, for each of the 6 faces of the cube\r\n//    private static void calculateFaces() {\r\n//        faces.addAll(0, 10, 2, 5, 1, 9,\r\n//                2, 5, 3, 4, 1, 9,\r\n//                4, 7, 5, 8, 6, 2,\r\n//                6, 2, 5, 8, 7, 3,\r\n//                0, 13, 1, 9, 4, 12,\r\n//                4, 12, 1, 9, 5, 8,\r\n//                2, 1, 6, 0, 3, 4,\r\n//                3, 4, 6, 0, 7, 3,\r\n//                0, 10, 4, 11, 2, 5,\r\n//                2, 5, 4, 11, 6, 6,\r\n//                1, 9, 3, 4, 5, 8,\r\n//                5, 8, 3, 4, 7, 3);\r\n//        cube.getFaces().addAll(faces);\r\n//    }\r\n//    //texture coords are x,y coords\r\n//    private static void calculateTexCords() {\r\n//        float x0 = 0f;\r\n//        float x1 = 1f / 4f;\r\n//        float x2 = 2f / 4f;\r\n//        float x3 = 3f / 4f;\r\n//        float x4 = 1f;\r\n//        float y0 = 0f;\r\n//        float y1 = 1f / 3f;\r\n//        float y2 = 2f / 3f;\r\n//        float y3 = 1f;\r\n//\r\n//\r\n//\r\n//        // x4 = 0; x3 = iw * 0.25f; x2 = iw / 2.0f; x1 = iw * 0.75f; x0 = iw;\r\n//        // y3 = 0; y2 = ih * 0.33f; y1 = ih * 0.66f; y0 = ih;\r\n//\r\n//        texCords.addAll((x1 + 0.001f), (y0 + 0.001f), (x2 - 0.001f), y0, (x0), (y1 + 0.001f), (x1 + 0.001f),\r\n//                (y1 + 0.001f), (x2 - 0.001f), (y1 + 0.001f), x3, (y1 + 0.001f), (x4), (y1 + 0.001f), (x0),\r\n//                (y2 - 0.001f), (x1 + 0.001f), (y2 - 0.001f), x2, (y2 - 0.001f), x3, (y2 - 0.001f), (x4),\r\n//                (y2 - 0.001f), (x1 + 0.001f), (y3 - 0.001f), x2, (y3 - 0.001f));\r\n//        cube.getTexCoords().addAll(texCords);\r\n//    }\r\n//\r\n//    public double getWidth() {\r\n//        return WIDTH;\r\n//    }\r\n//\r\n//    public double getHeight() {\r\n//        return HEIGHT;\r\n//    }\r\n//\r\n//    public double getDepth() {\r\n//        return DEPTH;\r\n//    }\r\n\r\n\r\n    private static Group setHouse() {\r\n        TdsModelImporter modelImporter = new TdsModelImporter(); //Model Importer\r\n\r\n        modelImporter.read(house); //Read in the house model\r\n        Node[] oneStoryHouse = modelImporter.getImport(); //create House object with Node[]\r\n        modelImporter.clear(); // clear the importer\r\n\r\n        for (Node node : oneStoryHouse) {\r\n            node.setScaleX(1);\r\n            node.setScaleY(1);\r\n            node.setScaleZ(1);\r\n            node.getTransforms().setAll(new Rotate(25, Rotate.Y_AXIS), new Rotate(-90, Rotate.X_AXIS));\r\n            node.setTranslateX(0); // These place the house towards the ground and to the right of the view\r\n            node.setTranslateY(200); // ^^^^^^^^^^^^^^^\r\n        }\r\n        houseImport = new Group(oneStoryHouse); //create new group with the house\r\n        return houseImport;\r\n    }\r\n\r\n    private static Group setAllSolarPanels(File solar, int pX, int pY, int pZ, int AY, int AX, int AZ) //----Model Helper Method----//\r\n    {\r\n        TdsModelImporter modelImporter = new TdsModelImporter(); //Model Importer\r\n        modelImporter.read(solar);\r\n        Node[] model = modelImporter.getImport();\r\n\r\n        for (Node node : model) {\r\n            node.setScaleX(1);\r\n            node.setScaleY(1);\r\n            node.setScaleZ(1);                                                         //Slope of roof\r\n            node.getTransforms().setAll(new Rotate(AY, Rotate.Y_AXIS), new Rotate(AX, Rotate.X_AXIS), new Rotate(AZ, Rotate.Z_AXIS));\r\n            node.setTranslateX(pX); // Move right or left\r\n            node.setTranslateY(pY); // Move Up or down ... Height of roof\r\n            node.setTranslateZ(pZ); // Move forward or backward\r\n        }\r\n        solarPanelImport = new Group(model);\r\n        return solarPanelImport;\r\n    }\r\n\r\n    private static Box createSolar(Group group1, double height, double depth, double width, double rax, double raz, double ray) {\r\n        Box box = new Box();\r\n        Bounds cord = group1.getBoundsInLocal();\r\n        box.getTransforms().setAll(new Rotate(ray, Rotate.Y_AXIS), new Rotate(rax, Rotate.X_AXIS), new Rotate(raz, Rotate.Z_AXIS));\r\n        box.setTranslateX(cord.getCenterX());\r\n        box.setTranslateZ(cord.getCenterZ());\r\n        box.setTranslateY(cord.getCenterY());\r\n        box.setHeight(height);\r\n        box.setDepth(depth);\r\n        box.setWidth(width);\r\n        box.setMaterial(clear);\r\n        return box;\r\n    }\r\n\r\n    private void setCenters(Rotate r, Group beingRotated) {\r\n        r.setPivotX(beingRotated.getBoundsInLocal().getCenterX());\r\n        r.setPivotY(beingRotated.getBoundsInLocal().getCenterY());\r\n        r.setPivotZ(beingRotated.getBoundsInLocal().getCenterZ());\r\n    }\r\n\r\n    private void gPanelOneSelected() {\r\n        oneSelected = true;\r\n        twoSelected = false;\r\n    }\r\n\r\n    private void gPanelTwoSelected() {\r\n        oneSelected = false;\r\n        twoSelected = true;\r\n    }\r\n\r\n    private void clearSelected() {\r\n        oneSelected = false;\r\n        twoSelected = false;\r\n    }\r\n\r\n    static void startParams() throws ParseException {\r\n        DateFormat formatter = new SimpleDateFormat(\"yyyyMMdd\"); //Formatter\r\n        date = formatter.parse(theDate); //Parse string to create Date object\r\n        cal = Calendar.getInstance(); //Calendar object created\r\n        cal.setTime(date); //Calender object given corresponding date\r\n\r\n        location = new Location(latitude.doubleValue(), longitude.doubleValue()); // Will be entered in coordinates\r\n        SunriseSunsetCalculator calculator = new SunriseSunsetCalculator(location, timeZone); // Creates calculator for sun times\r\n\r\n        sunriseTime = calculator.getOfficialSunriseForDate(cal); // Gets sunrise based on date and calculator created\r\n        sunsetTime = calculator.getOfficialSunsetForDate(cal); // Gets sunset based on date and calculator created\r\n    }\r\n\r\n    static Group models() {\r\n\r\n        int rightSideAngles[] = {-68, -68, 0};\r\n\r\n        int panelOneCoordinates[] = {300, -74, 190};\r\n        int panelTwoCoordinates[] = {395, -74, 400};\r\n\r\n        int leftSideAngles[] = {-68, -113, 0};\r\n        int panelThreeCoordinates[] = {190, -43, 250};\r\n        int panelFourCoordinates[] = {275, -43, 440};\r\n\r\n        int gPanelOneCoordinates[] = {0, 180, 190};\r\n        int gPanelTwoCoordinates[] = {460, 180, 100};\r\n        int gPanelLeftAngles[] = {115, -90, 0};\r\n        int gPanelRightAngles[] = {-65, -90, 0};\r\n//                                105\r\n        //Sets house and panels into scene\r\n        Group houseImport = setHouse();\r\n        Group solarPanelOne = setAllSolarPanels(solarPanel, panelOneCoordinates[0], panelOneCoordinates[1], panelOneCoordinates[2], rightSideAngles[0], rightSideAngles[1], rightSideAngles[2]); //4 roof panels\r\n        Group solarPanelTwo = setAllSolarPanels(solarPanel, panelTwoCoordinates[0], panelTwoCoordinates[1], panelTwoCoordinates[2], rightSideAngles[0], rightSideAngles[1], rightSideAngles[2]);\r\n        Group solarPanelThree = setAllSolarPanels(solarPanel, panelThreeCoordinates[0], panelThreeCoordinates[1], panelThreeCoordinates[2], leftSideAngles[0], leftSideAngles[1], leftSideAngles[2]);\r\n        Group solarPanelFour = setAllSolarPanels(solarPanel, panelFourCoordinates[0], panelFourCoordinates[1], panelFourCoordinates[2], leftSideAngles[0], leftSideAngles[1], leftSideAngles[2]);\r\n        gPanelOne = setAllSolarPanels(groundSolarPanel, gPanelOneCoordinates[0], gPanelOneCoordinates[1], gPanelOneCoordinates[2], gPanelLeftAngles[0], gPanelLeftAngles[1], gPanelLeftAngles[2]); //2 ground panels\r\n        gPanelTwo = setAllSolarPanels(groundSolarPanel, gPanelTwoCoordinates[0], gPanelTwoCoordinates[1], gPanelTwoCoordinates[2], gPanelRightAngles[0], gPanelRightAngles[1], gPanelRightAngles[2]);\r\n\r\n        //sets boxes with panels\r\n        Box boxers = createSolar(solarPanelOne, 39, 3.64, 65, rightSideAngles[1], rightSideAngles[2], rightSideAngles[0]);\r\n        Box boxers2 = createSolar(solarPanelTwo, 39, 3.64, 65, rightSideAngles[1], rightSideAngles[2], rightSideAngles[0]);\r\n        Box boxers3 = createSolar(solarPanelThree, 39, 3.64, 65, -rightSideAngles[1], -rightSideAngles[2], rightSideAngles[0]);\r\n        Box boxers4 = createSolar(solarPanelFour, 39, 3.64, 65, -rightSideAngles[1], -rightSideAngles[2], rightSideAngles[0]);\r\n        Box boxers5 = createSolar(gPanelOne, 39, 3.64, 130, 55, 0, -65);\r\n        Box boxers6 = createSolar(gPanelTwo, 39, 3.64, 130, -55, 0, -65);\r\n\r\n        //Grouping together solar panel w/ respective box\r\n        solarPanelOnewR = new Group(solarPanelOne, boxers);\r\n        solarPanelTwowR = new Group(solarPanelTwo, boxers2);\r\n        solarPanelThreewR = new Group(solarPanelThree, boxers3);\r\n        solarPanelFourwR = new Group(solarPanelFour, boxers4);\r\n        gPanelOneBox = new Group(gPanelOne, boxers5);\r\n        gPanelTwoBox = new Group(gPanelTwo, boxers6);\r\n\r\n        panelsWHouse = new Group(houseImport, solarPanelOnewR, solarPanelTwowR, solarPanelThreewR, solarPanelFourwR, gPanelOneBox, gPanelTwoBox);\r\n        panelsWHouse.setTranslateY(500); // puts house at ground level.. If you comment this it removes models on screen\r\n        panelsWHouse.setTranslateX(400); // puts house at ground level.. If you comment this out it removes models on screen\r\n        return panelsWHouse;\r\n    }\r\n\r\n    static void sunCreation() {\r\n        Sphere sphere = new Sphere(80.0f);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseColor(Color.YELLOW);\r\n        sphere.setMaterial(material);\r\n\r\n        // create a point light\r\n        PointLight pointlight = new PointLight();\r\n\r\n        // create a Group\r\n        sun = new Group(sphere, pointlight);\r\n\r\n        sphere.setTranslateX(100);\r\n        sphere.setTranslateY(-200);\r\n        pointlight.setTranslateZ(-1000);\r\n        pointlight.setTranslateX(+1000);\r\n        pointlight.setTranslateY(+10);\r\n        pointlight.setColor(Color.rgb(255, 255, 255));\r\n        pointlight.setLightOn(true);\r\n    }\r\n\r\n    static void sunTrajectory(Double sliderValue) {\r\n        double x;\r\n        double y;\r\n        double angle;\r\n        double angleRadians;\r\n\r\n        if(sliderValue == 0)\r\n        {\r\n            //Suns start position\r\n            angle = 0;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 0.5)\r\n        {\r\n            angle = 7.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 1.0)\r\n        {\r\n            angle = 15;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 1.5)\r\n        {\r\n            angle = 22.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 2.0)\r\n        {\r\n            angle = 30;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 2.5) {\r\n            angle = 37.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 3.0)\r\n        {\r\n            angle = 45;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 3.5)\r\n        {\r\n            angle = 52.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 4.0)\r\n        {\r\n            angle = 60;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 4.5)\r\n        {\r\n            angle = 67.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 5.0)\r\n        {\r\n            angle = 75;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 5.5)\r\n        {\r\n            angle = 82.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 6.0)\r\n        {\r\n            angle = 90;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 6.5)\r\n        {\r\n            angle = 97.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 7.0)\r\n        {\r\n            angle = 105;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 7.5)\r\n        {\r\n            angle = 112.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 8.0)\r\n        {\r\n            angle = 120;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 8.5)\r\n        {\r\n            angle = 127.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 9.0)\r\n        {\r\n            angle = 135;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 9.5)\r\n        {\r\n            angle = 142.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 10.0)\r\n        {\r\n            angle = 150;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 10.5)\r\n        {\r\n            angle = 157.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 11.0)\r\n        {\r\n            angle = 165;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 11.5)\r\n        {\r\n            angle = 172.5;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 12.0)\r\n        {\r\n            angle = 178;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 12.5)\r\n        {\r\n            angle = 179;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n        else if(sliderValue == 13)\r\n        {\r\n            angle = 180;\r\n            angleRadians = Math.toRadians(angle);\r\n            x = Math.cos(angleRadians);\r\n            y = Math.sin(angleRadians);\r\n\r\n            sun.setTranslateX(x * 1000);\r\n            sun.setTranslateY(-y * 1000);\r\n            sun.setTranslateZ(0);\r\n        }\r\n\r\n    }\r\n\r\n    //helper methods for most optimal\r\n    public static double distancecalc(Box box, Group sun) {\r\n        Point3D point1 = new Point3D(box.getTranslateX(), box.getTranslateY(), box.getTranslateZ());\r\n        Point3D point2 = new Point3D(sun.getTranslateX(), sun.getTranslateY(), sun.getTranslateZ());\r\n        Double distance = Math.sqrt(Math.pow(point1.getX() - point2.getX(), 2) + Math.pow(point1.getY() - point2.getY(), 2) + Math.pow(point1.getZ() - point2.getZ(), 2));\r\n        return distance;\r\n    }\r\n\r\n    public static void colorSetOpt() {\r\n        double total = 0.0;\r\n        double averageP1 = 0.0;\r\n        double averageP2 = 0.0;\r\n        double averageP3 = 0.0;\r\n        double averageP4 = 0.0;\r\n        double averageGP1 = 0.0;\r\n        double averageGP2 = 0.0;\r\n        double[] totalHours = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0};\r\n\r\n        for(int i = 0; i < totalHours.length; i++){\r\n            sunTrajectory(totalHours[i]);\r\n            total += calculateLightIntesity((Box) solarPanelOnewR.getChildren().get(1), sun);\r\n        }\r\n        averageP1 = total / 12;\r\n\r\n        total = 0;\r\n        for(int i = 0; i < totalHours.length; i++){\r\n            sunTrajectory(totalHours[i]);\r\n            total += calculateLightIntesity((Box) solarPanelTwowR.getChildren().get(1), sun);\r\n        }\r\n        averageP2 = total / 12;\r\n\r\n        total = 0;\r\n        for(int i = 0; i < totalHours.length; i++){\r\n            sunTrajectory(totalHours[i]);\r\n            total += calculateLightIntesity((Box) solarPanelThreewR.getChildren().get(1), sun);\r\n        }\r\n        averageP3 = total / 12;\r\n\r\n        total = 0;\r\n        for(int i = 0; i < totalHours.length; i++){\r\n            sunTrajectory(totalHours[i]);\r\n            total += calculateLightIntesity((Box) solarPanelFourwR.getChildren().get(1), sun);\r\n        }\r\n        averageP4 = total / 12;\r\n\r\n        total = 0;\r\n        for(int i = 0; i < totalHours.length; i++){\r\n            sunTrajectory(totalHours[i]);\r\n            total += calculateLightIntesity((Box) gPanelOneBox.getChildren().get(1), sun);\r\n        }\r\n        averageGP1 = total / 12;\r\n\r\n        total = 0;\r\n        for(int i = 0; i < totalHours.length; i++){\r\n            sunTrajectory(totalHours[i]);\r\n            total += calculateLightIntesity((Box) gPanelTwoBox.getChildren().get(1), sun);\r\n        }\r\n        averageGP2 = total / 12;\r\n\r\n        box1closest = false;\r\n        box2closest = false;\r\n        box3closest = false;\r\n        box4closest = false;\r\n        gbox1closest = false;\r\n        gbox2closest = false;\r\n\r\n        if (averageP1 > averageP2 && averageP1 > averageP3 && averageP1 > averageP4) {\r\n            box1closest = true;\r\n            box2closest = false;\r\n            box3closest = false;\r\n            box4closest = false;\r\n        }\r\n        if (averageP2 > averageP1 && averageP2 > averageP3 && averageP2 > averageP4) {\r\n            box1closest = false;\r\n            box2closest = true;\r\n            box3closest = false;\r\n            box4closest = false;\r\n        }\r\n        if (averageP3 > averageP1 && averageP3 > averageP2 && averageP3 > averageP4) {\r\n            box1closest = false;\r\n            box2closest = false;\r\n            box3closest = true;\r\n            box4closest = false;\r\n        }\r\n        if (averageP4 > averageP1 && averageP4 > averageP2 && averageP4 > averageP3) {\r\n            box1closest = false;\r\n            box2closest = false;\r\n            box3closest = false;\r\n            box4closest = true;\r\n        }\r\n        if (averageGP1 > averageGP2) {\r\n            gbox1closest = true;\r\n            gbox2closest = false;\r\n        }\r\n        if (averageGP2 > averageGP1) {\r\n            gbox1closest = false;\r\n            gbox2closest = true;\r\n        }\r\n\r\n        if (box1closest = true) {\r\n            ((Box) solarPanelOnewR.getChildren().get(1)).setMaterial(optimal);\r\n            ((Box) solarPanelTwowR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelThreewR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelFourwR.getChildren().get(1)).setMaterial(subOptimal);\r\n        }\r\n        if (box2closest = true) {\r\n            ((Box) solarPanelOnewR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelTwowR.getChildren().get(1)).setMaterial(optimal);\r\n            ((Box) solarPanelThreewR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelFourwR.getChildren().get(1)).setMaterial(subOptimal);\r\n\r\n        }\r\n        if (box3closest = true) {\r\n            ((Box) solarPanelOnewR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelTwowR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelThreewR.getChildren().get(1)).setMaterial(optimal);\r\n            ((Box) solarPanelFourwR.getChildren().get(1)).setMaterial(subOptimal);\r\n        }\r\n        if (box4closest = true) {\r\n            ((Box) solarPanelOnewR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelTwowR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelThreewR.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) solarPanelFourwR.getChildren().get(1)).setMaterial(optimal);\r\n        }\r\n        if (gbox1closest = true) {\r\n            ((Box) gPanelOneBox.getChildren().get(1)).setMaterial(optimal);\r\n            ((Box) gPanelTwoBox.getChildren().get(1)).setMaterial(subOptimal);\r\n        }\r\n        if (gbox2closest = true) {\r\n            ((Box) gPanelOneBox.getChildren().get(1)).setMaterial(subOptimal);\r\n            ((Box) gPanelTwoBox.getChildren().get(1)).setMaterial(optimal);\r\n        }\r\n    }\r\n\r\n    static double calculateLightIntesity(Box box, Group Sun){\r\n        double distance = Math.abs(distancecalc(box, Sun));\r\n        double intesity = 1/((distance)*(distance));\r\n        intesity = intesity*10000000;\r\n        return intesity;\r\n    }\r\n\r\n    //skybox loading and blending of the images to make it look seamless (I think)\r\n    private void loadImageViews() {\r\n        for(ImageView imageViews : views)\r\n        {\r\n            imageViews.setSmooth(true);\r\n\r\n            imageViews.setScaleX(10);\r\n            imageViews.setScaleY(10);\r\n            imageViews.setScaleZ(10);\r\n            imageViews.setPreserveRatio(true);\r\n        }\r\n        buildSkyboxFromImage();\r\n    }\r\n    //for folding skybox from imported 4x3 image\r\n\r\n    //this is what the importing image should look like:\r\n    /*\r\n     *              ____\r\n     *             |top |\r\n     *         ____|____|____ ____\r\n     *        |left|fwd |rght|back|\r\n     *        |____|____|____|____|\r\n     *             |bot |\r\n     *             |____|\r\n     *\r\n     */\r\n\r\n    //loadImageViewPorts - builds skybox\r\n    public void buildSkyboxFromImage()\r\n    {\r\n        //layoutViews(); //top, back, left...\r\n\r\n        //TODO consider if the below is an overcomplication and if you NEED to use a constructor.\r\n        //note that the box we pass in has x,y,z  already there. add diffuse image and call it a day. Assume size is correct?\r\n\r\n\r\n        // Box skyboxBox = new Box(10000, 10000, 10000);\r\n        //Sphere skybox = new Sphere(5000);\r\n\r\n\r\n\r\n\r\n        //4 x 3 image divided by their own ratio should both = 1, validates size of incoming image, we also check when buildingsk=ybox, but what do you do\r\n//        if(width/4 != height/3)\r\n//            throw new UnsupportedOperationException(\"Image needs to be a 4x3 image. Sideways cross, see \");\r\n        double width = WIDTH;\r\n        double height = HEIGHT;\r\n        size = width - height;\r\n        recalculateSize(size);\r\n\r\n        //setting up grids for\r\n        double\r\n                topx = size, topy =0,\r\n                botx = size, boty = size*2,\r\n                leftx = 0, lefty= size,\r\n                rightx = size * 2, righty = size,\r\n                fwdx = size, fwdy= size,\r\n                backx = size *3, backy = size;\r\n\r\n        //add top padding x+, y+, width-, height\r\n        top.setViewport(new Rectangle2D(topx , topy , size, size ));\r\n\r\n        //add left padding x, y+, width, height-\r\n        left.setViewport(new Rectangle2D(leftx , lefty , size - 1, size - 1));\r\n\r\n        //add front padding x+, y+, width-, height\r\n        back.setViewport(new Rectangle2D(fwdx , fwdy, size , size));\r\n\r\n        //add right padding x, y+, width, height-\r\n        right.setViewport(new Rectangle2D(rightx, righty , size , size ));\r\n\r\n        //add back padding x, y+, width, height-\r\n        front.setViewport(new Rectangle2D(backx + 1, backy - 1, size - 1, size - 1));\r\n\r\n        //add bottom padding x+, y, width-, height-\r\n        bottom.setViewport(new Rectangle2D(botx, boty, size , size));\r\n\r\n\r\n        for(ImageView view : views)\r\n        {\r\n            view.setImage(skyboxImage);\r\n            // System.out.println(view.getId() + view.getViewport() + size);  //TODO just for testing correct outputs\r\n\r\n        }\r\n        final PhongMaterial skyMaterial = new PhongMaterial();\r\n        skyMaterial.setSpecularColor(Color.TRANSPARENT);\r\n        skyMaterial.setDiffuseMap(skyboxImage);\r\n        root.getTransforms().add(affine);\r\n        // views.setMaterial(skyMaterial);\r\n        // views.setCullFace(CullFace.NONE);\r\n        layoutViews();\r\n        root.getChildren().addAll(views);\r\n\r\n    }  //ensuring that our cells for our skybox image are appropriately sized before folding\r\n    private void recalculateSize(double size)\r\n    {\r\n        double factor = Math.floor(getSize()/size);\r\n        setSize(size * factor);\r\n    }\r\n\r\n    //build the box through translations and folding\r\n    private void layoutViews()\r\n    {\r\n        for(ImageView view : views)\r\n        {\r\n            view.setFitWidth(getSize());\r\n            view.setFitHeight(getSize());\r\n        }\r\n\r\n\r\n        back.setTranslateX(-0.5 * getSize());\r\n        back.setTranslateY(-0.5 * getSize());\r\n        back.setTranslateZ(-0.5 * getSize());\r\n\r\n\r\n        front.setTranslateX(-0.5 * getSize());\r\n        front.setTranslateY(-0.5 * getSize());\r\n        front.setTranslateZ(0.5 * getSize());\r\n        front.setRotationAxis(Rotate.Z_AXIS);\r\n        front.setRotate(-180);\r\n        front.getTransforms().add(new Rotate(180,front.getFitHeight() / 2, 0,0, Rotate.X_AXIS));\r\n        front.setTranslateY(front.getTranslateY() - getSize());\r\n\r\n        top.setTranslateX(-0.5 * getSize());\r\n        top.setTranslateY(-1 * getSize());\r\n        top.setRotationAxis(Rotate.X_AXIS);\r\n        top.setRotate(-90);\r\n\r\n        bottom.setTranslateX(-0.5 * getSize());\r\n        bottom.setTranslateY(0);\r\n        bottom.setRotationAxis(Rotate.X_AXIS);\r\n        bottom.setRotate(90);\r\n\r\n        left.setTranslateX(-1 * getSize());\r\n        left.setTranslateY(-0.5 * getSize());\r\n        left.setRotationAxis(Rotate.Y_AXIS);\r\n        left.setRotate(90);\r\n\r\n        right.setTranslateX(0);\r\n        right.setTranslateY(-0.5 * getSize());\r\n        right.setRotationAxis(Rotate.Y_AXIS);\r\n        right.setRotate(-90);\r\n    }\r\n\r\n    public final double getSize()\r\n    {\r\n        return size;\r\n    }\r\n\r\n    public final void setSize(double value)\r\n    {\r\n        size = value;\r\n    }\r\n\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SkyBoxJavaFX-Tester/src/main/java/com/example/skyboxjavafxtester/SkyBoxApplication.java b/SkyBoxJavaFX-Tester/src/main/java/com/example/skyboxjavafxtester/SkyBoxApplication.java
--- a/SkyBoxJavaFX-Tester/src/main/java/com/example/skyboxjavafxtester/SkyBoxApplication.java	
+++ b/SkyBoxJavaFX-Tester/src/main/java/com/example/skyboxjavafxtester/SkyBoxApplication.java	
@@ -126,13 +126,7 @@
     static Double longitude = -117.4260;
     static Date date;
 
-    //Sun movement variables
-    static int timeAS;
-    static int timeBS;
-    static int sliceofday;
-    static int totalMinutes = 720;
-    static int sunrise = 0;
-    static int sunset = 720;
+
     static boolean box1closest;
     static boolean box2closest;
     static boolean box3closest;
@@ -211,9 +205,8 @@
 
         entireFrame.getChildren().add(fxmlLoader.load());
        // skyboxPane.getChildren().addAll((Collection<? extends Node>) skyBox);
-        entireFrame.getChildren().addAll(skyboxPane);
+        //entireFrame.getChildren().addAll(skyboxPane);
 
-//        SubScene subScene = new SubScene(skyBox, 768, 600);
 
 //        PerspectiveCamera camera = new PerspectiveCamera();
 //        camera.setNearClip(0.1);
@@ -222,8 +215,10 @@
 //        subScene.setCamera(camera);
 //        subScene.setRoot(skyBox);
 
-        root.getChildren().addAll(entireFrame, skyboxPane);
-        Scene scene = new Scene(root, 1024, 768); // Make the whole scene with everything
+        root.getChildren().addAll(skyboxPane, entireFrame);
+        SubScene subScene = new SubScene(root, 768, 600, true, SceneAntialiasing.BALANCED);
+        Group subS = new Group(subScene);
+        Scene scene = new Scene(subS, 1024, 768); // Make the whole scene with everything
         cameraAndControls(root, panelsWHouse, scene);
         scene.setRoot(root);
 
@@ -267,6 +262,7 @@
         //----------------Controls & Camera Controls Section----------------------------//
         //TODO methodize out controls //NOTE i did try to split this from the scene and camera setup, but they were too intertwined at the time.
         // Use keyboard to control camera position
+
         scene.setOnKeyPressed(event -> {
             double change = cameraQuantity;
             // What key did the user press?
@@ -412,6 +408,7 @@
             yRotate.setAngle(((yRotate.getAngle() - mouseDeltaX * 0.2) % 360 + 540) % 360 - 180); // +
             xRotate.setAngle(((xRotate.getAngle() + mouseDeltaY * 0.2) % 360 + 540) % 360 - 180); // -
         });
+
     }
 
     static void constructWorld(Group skyBox) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"bee96428-43aa-4cdc-a1f0-45c8c6e65952\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"readyForMain\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/SkyBoxJavaFX-Tester/src/main/java/com/example/skyboxjavafxtester/SkyBoxApplication.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/SkyBoxJavaFX-Tester/src/main/java/module-info.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/SkyBoxJavaFX-Tester/pom.xml\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"GitStage.ChangesTree.GroupingKeys\" value=\"directory&#10;module&#10;repository\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/sunset1.jar\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"SkyBoxApplication\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.skyboxjavafxtester.SkyBoxApplication\" />\r\n      <module name=\"SkyBoxJavaFX-Tester\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task id=\"LOCAL-00001\" summary=\"Code updated\">\r\n      <created>1647666044678</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647666044678</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Code updated\">\r\n      <created>1647667646404</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647667646404</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Code updated\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Code updated\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/SeniorCapstone_GroupB$SkyboxApplication.ic\" NAME=\"SkyboxApplication Coverage Results\" MODIFIED=\"1642394879393\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>com.capstone.skyboxjavafx.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -66,7 +66,14 @@
       <option name="project" value="LOCAL" />
       <updated>1647667646404</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Code updated">
+      <created>1647680141883</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1647680141883</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
